{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4768d0d8",
   "metadata": {},
   "source": [
    "# Tagging\n",
    "\n",
    "Sometimes we might want to tag **experiments** and objects with distinct values to organize\n",
    "and filter them later on. For example, tags could be used to differentiate between\n",
    "the type of model or classifier used during the **experiment** (i.e. `linear regression`\n",
    "or `random forest`). Besides, **experiments**, ``rubicon_ml`` can tag artifacts, dataframes, \n",
    "features, metrics, and parameters. \n",
    "\n",
    "Below, we'll see examples of tagging functionality."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bfc54ec5",
   "metadata": {},
   "source": [
    "### Adding tags when logging\n",
    "By utilizing the tags parameter:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "59a475f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "from rubicon_ml import Rubicon\n",
    "import pandas as pd\n",
    "\n",
    "rubicon = Rubicon(persistence=\"memory\")\n",
    "project = rubicon.get_or_create_project(\"Tagging\")\n",
    "\n",
    "#logging experiments with tags\n",
    "experiment1 = project.log_experiment(name=\"experiment1\", tags=[\"odd_num_exp\"])\n",
    "experiment2 = project.log_experiment(name=\"experiment2\", tags=[\"even_num_exp\"])\n",
    "\n",
    "#logging artifacts, dataframes, features, metrics and parameters with tags\n",
    "first_artifact = experiment1.log_artifact(data_bytes=b\"bytes\", name=\"data_path\", tags=[\"data\"])\n",
    "\n",
    "confusion_matrix = pd.DataFrame([[5, 0, 0], [0, 5, 1], [0, 0, 4]], columns=[\"x\", \"y\", \"z\"])\n",
    "first_dataframe = experiment1.log_dataframe(confusion_matrix, tags=[\"three_column\"])\n",
    "\n",
    "first_feature = experiment1.log_feature(\"year\", tags=[\"time\"])\n",
    "\n",
    "first_metric = experiment1.log_metric(\"accuracy\", .8, tags=[\"scalar\"])\n",
    "\n",
    "#can add multiple tags at logging (works for all objects)\n",
    "first_parameter = experiment1.log_parameter(\"n_estimators\", tags=[\"tag1\", \"tag2\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "61d0926a",
   "metadata": {},
   "source": [
    "### Viewing tags\n",
    "Use the .tags attribute to view tags associated with an object:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "064edb9c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['odd_num_exp']\n",
      "['even_num_exp']\n",
      "['data']\n",
      "['three_column']\n",
      "['time']\n",
      "['scalar']\n",
      "['tag1', 'tag2']\n"
     ]
    }
   ],
   "source": [
    "print(experiment1.tags)\n",
    "print(experiment2.tags)\n",
    "print(first_artifact.tags)\n",
    "print(first_dataframe.tags)\n",
    "print(first_feature.tags)\n",
    "print(first_metric.tags)\n",
    "print(first_parameter.tags)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86bda4bf",
   "metadata": {},
   "source": [
    "### Adding tags to existing objects\n",
    "Use the object's add_tags() method. Works the same for all taggable objects. Here's an example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2e5bc3eb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['linear regression', 'odd_num_exp']\n",
      "['even_num_exp', 'random forrest']\n",
      "['data', 'added_tag']\n",
      "['added_tag', 'three_column']\n",
      "['time', 'added_tag']\n",
      "['added_tag', 'scalar']\n",
      "['added_tag2', 'tag1', 'tag2', 'added_tag1']\n"
     ]
    }
   ],
   "source": [
    "experiment1.add_tags([\"linear regression\"])\n",
    "experiment2.add_tags([\"random forrest\"])\n",
    "first_artifact.add_tags([\"added_tag\"])\n",
    "first_dataframe.add_tags([\"added_tag\"])\n",
    "first_feature.add_tags([\"added_tag\"])\n",
    "first_metric.add_tags([\"added_tag\"])\n",
    "\n",
    "#can add multiple tags (works for all objects)\n",
    "first_parameter.add_tags([\"added_tag1\", \"added_tag2\"])\n",
    "\n",
    "\n",
    "print(experiment1.tags)\n",
    "print(experiment2.tags)\n",
    "print(first_artifact.tags)\n",
    "print(first_dataframe.tags)\n",
    "print(first_feature.tags)\n",
    "print(first_metric.tags)\n",
    "print(first_parameter.tags)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2527eb1a",
   "metadata": {},
   "source": [
    "### Removing tags from existing objects\n",
    "Use the object's remove_tags() method. Works the same for all taggable objects. Here's an example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "356a6089",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['odd_num_exp']\n",
      "['even_num_exp']\n",
      "['data']\n",
      "['three_column']\n",
      "['time']\n",
      "['scalar']\n",
      "['tag2', 'tag1']\n"
     ]
    }
   ],
   "source": [
    "experiment1.remove_tags([\"linear regression\"])\n",
    "experiment2.remove_tags([\"random forrest\"])\n",
    "first_artifact.remove_tags([\"added_tag\"])\n",
    "first_dataframe.remove_tags([\"added_tag\"])\n",
    "first_feature.remove_tags([\"added_tag\"])\n",
    "first_metric.remove_tags([\"added_tag\"])\n",
    "\n",
    "#can remove multiple tags (works for all objects)\n",
    "first_parameter.remove_tags([\"added_tag2\", \"added_tag1\"])\n",
    "\n",
    "print(experiment1.tags)\n",
    "print(experiment2.tags)\n",
    "print(first_artifact.tags)\n",
    "print(first_dataframe.tags)\n",
    "print(first_feature.tags)\n",
    "print(first_metric.tags)\n",
    "print(first_parameter.tags)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c8edad59",
   "metadata": {},
   "source": [
    "### Retreiving objects by their tags\n",
    "After logging objects, here's how we can include tags as a paramter to filter our results. We can specify the `qtype` parameter to change the search type to \"and\" from \"or\" (default). Here this is only shown with experiments, but works for any taggable object when doing parentObject.retrievalObjects():"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "43cfa3ed",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "old experiments: experiment1, experiment2\n",
      "\n",
      "new experiments: experiment3\n",
      "\n",
      "odd experiments: experiment1, experiment3\n",
      "\n",
      "same experiments: experiment1, experiment3\n",
      "\n",
      "expected experiment: experiment3\n",
      "\n"
     ]
    }
   ],
   "source": [
    "experiment1.add_tags([\"old_exp\"])\n",
    "experiment2.add_tags([\"old_exp\"])\n",
    "experiment3 = project.log_experiment(name=\"experiment3\", tags=[\"odd_num_exp\",\"new_exp\"])\n",
    "\n",
    "#want just old experiments\n",
    "old_experiments = project.experiments(tags=[\"old_exp\"])\n",
    "\n",
    "#want just new experiments\n",
    "new_experiments = project.experiments(tags=[\"new_exp\"])\n",
    "\n",
    "#want just the odd number experiments\n",
    "odd_experiments = project.experiments(tags=[\"odd_num_exp\"])\n",
    "\n",
    "#this will return the same result as above since qtype=\"or\" by default\n",
    "same_experiments = project.experiments(tags=[\"odd_num_exp\", \"new_exp\"])\n",
    "\n",
    "#this will return just experiment3\n",
    "expected_experiment = project.experiments(tags=[\"odd_num_exp\", \"new_exp\"], qtype=\"and\")\n",
    "\n",
    "\n",
    "#getting both the old experiments 1 and 2\n",
    "print(\"old experiments: \" + str(old_experiments[0].name) + \", \" + str(old_experiments[1].name) + \"\\n\")\n",
    "\n",
    "#getting just the new experiment 3\n",
    "print(\"new experiments: \" + str(new_experiments[0].name) + \"\\n\")\n",
    "\n",
    "#getting both odd experiments 1 and 3\n",
    "print(\"odd experiments: \" + str(odd_experiments[0].name) + \", \" + str(odd_experiments[1].name) + \"\\n\")\n",
    "\n",
    "#again getting both experiments 1 and 3\n",
    "print(\"same experiments: \" + str(same_experiments[0].name) + \", \" + str(same_experiments[1].name) + \"\\n\")\n",
    "\n",
    "#getting just experiment 3\n",
    "print(\"expected experiment: \" + str(expected_experiment[0].name) + \"\\n\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
